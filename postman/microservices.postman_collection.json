{
  "info": {
    "_postman_id": "5a7b3f15-2b52-4a3e-8f4e-2d5a0e38b7d1",
    "name": "Microservices API (Gateway + Direct)",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": "Collection to test Course and Student services via Gateway and direct service endpoints. Includes a sample Address endpoint (direct)."
  },
  "item": [
    {
      "name": "Gateway",
      "item": [
        {
          "name": "Course",
          "item": [
            {
              "name": "Create Course (GW)",
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" },
                  { "key": "X-Correlation-Id", "value": "{{correlation_id}}" },
                  { "key": "X-User-Id", "value": "{{user_id}}" }
                ],
                "url": {
                  "raw": "{{gateway_base}}/course/courses",
                  "host": ["{{gateway_base}}"],
                  "path": ["course", "courses"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Intro to Microservices\",\n  \"description\": \"Foundations of microservices\",\n  \"instructor\": \"Dr. Smith\",\n  \"department\": \"CS\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status is 201 or 200', function () {",
                      "  pm.expect([200,201]).to.include(pm.response.code);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Get Course by ID (GW)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "X-Correlation-Id", "value": "{{correlation_id}}" },
                  { "key": "X-User-Id", "value": "{{user_id}}" }
                ],
                "url": {
                  "raw": "{{gateway_base}}/course/courses/{{courseId}}",
                  "host": ["{{gateway_base}}"],
                  "path": ["course", "courses", "{{courseId}}"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status is 200', function () {",
                      "  pm.response.to.have.status(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Get All Courses (GW)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "X-Correlation-Id", "value": "{{correlation_id}}" },
                  { "key": "X-User-Id", "value": "{{user_id}}" }
                ],
                "url": {
                  "raw": "{{gateway_base}}/course/courses",
                  "host": ["{{gateway_base}}"],
                  "path": ["course", "courses"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                      "pm.test('Body is array', function () { pm.expect(pm.response.json()).to.be.an('array'); });"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Update Course (GW)",
              "request": {
                "method": "PUT",
                "header": [
                  { "key": "Content-Type", "value": "application/json" },
                  { "key": "X-Correlation-Id", "value": "{{correlation_id}}" },
                  { "key": "X-User-Id", "value": "{{user_id}}" }
                ],
                "url": {
                  "raw": "{{gateway_base}}/course/courses/{{courseId}}",
                  "host": ["{{gateway_base}}"],
                  "path": ["course", "courses", "{{courseId}}"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Intro to Microservices - Updated\",\n  \"description\": \"Updated desc\",\n  \"instructor\": \"Dr. Jane\",\n  \"department\": \"CS\"\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status is 200', function () { pm.response.to.have.status(200); });"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Delete Course (GW)",
              "request": {
                "method": "DELETE",
                "header": [
                  { "key": "X-Correlation-Id", "value": "{{correlation_id}}" },
                  { "key": "X-User-Id", "value": "{{user_id}}" }
                ],
                "url": {
                  "raw": "{{gateway_base}}/course/courses/{{courseId}}",
                  "host": ["{{gateway_base}}"],
                  "path": ["course", "courses", "{{courseId}}"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status is 200 or 204', function () { pm.expect([200,204]).to.include(pm.response.code); });"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        },
        {
          "name": "Student",
          "item": [
            {
              "name": "Create Student (GW)",
              "request": {
                "method": "POST",
                "header": [
                  { "key": "Content-Type", "value": "application/json" },
                  { "key": "X-Correlation-Id", "value": "{{correlation_id}}" },
                  { "key": "X-User-Id", "value": "{{user_id}}" }
                ],
                "url": {
                  "raw": "{{gateway_base}}/student/students",
                  "host": ["{{gateway_base}}"],
                  "path": ["student", "students"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Alice Johnson\",\n  \"email\": \"alice@example.com\",\n  \"age\": 21\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status is 201 or 200', function () { pm.expect([200,201]).to.include(pm.response.code); });"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Get Student by ID (GW)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "X-Correlation-Id", "value": "{{correlation_id}}" },
                  { "key": "X-User-Id", "value": "{{user_id}}" }
                ],
                "url": {
                  "raw": "{{gateway_base}}/student/students/{{studentId}}",
                  "host": ["{{gateway_base}}"],
                  "path": ["student", "students", "{{studentId}}"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status is 200', function () { pm.response.to.have.status(200); });"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Get All Students (GW)",
              "request": {
                "method": "GET",
                "header": [
                  { "key": "X-Correlation-Id", "value": "{{correlation_id}}" },
                  { "key": "X-User-Id", "value": "{{user_id}}" }
                ],
                "url": {
                  "raw": "{{gateway_base}}/student/students",
                  "host": ["{{gateway_base}}"],
                  "path": ["student", "students"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
                      "pm.test('Body is array', function () { pm.expect(pm.response.json()).to.be.an('array'); });"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Update Student (GW)",
              "request": {
                "method": "PUT",
                "header": [
                  { "key": "Content-Type", "value": "application/json" },
                  { "key": "X-Correlation-Id", "value": "{{correlation_id}}" },
                  { "key": "X-User-Id", "value": "{{user_id}}" }
                ],
                "url": {
                  "raw": "{{gateway_base}}/student/students/{{studentId}}",
                  "host": ["{{gateway_base}}"],
                  "path": ["student", "students", "{{studentId}}"]
                },
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Alice Johnson Updated\",\n  \"email\": \"alice.updated@example.com\",\n  \"age\": 22\n}"
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status is 200', function () { pm.response.to.have.status(200); });"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            },
            {
              "name": "Delete Student (GW)",
              "request": {
                "method": "DELETE",
                "header": [
                  { "key": "X-Correlation-Id", "value": "{{correlation_id}}" },
                  { "key": "X-User-Id", "value": "{{user_id}}" }
                ],
                "url": {
                  "raw": "{{gateway_base}}/student/students/{{studentId}}",
                  "host": ["{{gateway_base}}"],
                  "path": ["student", "students", "{{studentId}}"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status is 200 or 204', function () { pm.expect([200,204]).to.include(pm.response.code); });"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Direct Services",
      "item": [
        {
          "name": "Course Service",
          "item": [
            {
              "name": "Create Course (Direct)",
              "request": {
                "method": "POST",
                "header": [ { "key": "Content-Type", "value": "application/json" } ],
                "url": { "raw": "{{course_base}}/course/courses", "host": ["{{course_base}}"], "path": ["course","courses"] },
                "body": { "mode": "raw", "raw": "{\n  \"name\": \"Intro to Microservices\",\n  \"description\": \"Foundations of microservices\",\n  \"instructor\": \"Dr. Smith\",\n  \"department\": \"CS\"\n}" }
              }
            },
            {
              "name": "Get Course (Direct)",
              "request": {
                "method": "GET",
                "url": { "raw": "{{course_base}}/course/courses/{{courseId}}", "host": ["{{course_base}}"], "path": ["course","courses","{{courseId}}"] }
              }
            },
            {
              "name": "Get All Courses (Direct)",
              "request": { "method": "GET", "url": { "raw": "{{course_base}}/course/courses", "host": ["{{course_base}}"], "path": ["course","courses"] } }
            },
            {
              "name": "Update Course (Direct)",
              "request": {
                "method": "PUT",
                "header": [ { "key": "Content-Type", "value": "application/json" } ],
                "url": { "raw": "{{course_base}}/course/courses/{{courseId}}", "host": ["{{course_base}}"], "path": ["course","courses","{{courseId}}"] },
                "body": { "mode": "raw", "raw": "{\n  \"name\": \"Intro to Microservices - Updated\",\n  \"description\": \"Updated desc\",\n  \"instructor\": \"Dr. Jane\",\n  \"department\": \"CS\"\n}" }
              }
            },
            {
              "name": "Delete Course (Direct)",
              "request": { "method": "DELETE", "url": { "raw": "{{course_base}}/course/courses/{{courseId}}", "host": ["{{course_base}}"], "path": ["course","courses","{{courseId}}"] } }
            }
          ]
        },
        {
          "name": "Student Service",
          "item": [
            {
              "name": "Create Student (Direct)",
              "request": {
                "method": "POST",
                "header": [ { "key": "Content-Type", "value": "application/json" } ],
                "url": { "raw": "{{student_base}}/student/students", "host": ["{{student_base}}"], "path": ["student","students"] },
                "body": { "mode": "raw", "raw": "{\n  \"name\": \"Alice Johnson\",\n  \"email\": \"alice@example.com\",\n  \"age\": 21\n}" }
              }
            },
            {
              "name": "Get Student (Direct)",
              "request": { "method": "GET", "url": { "raw": "{{student_base}}/student/students/{{studentId}}", "host": ["{{student_base}}"], "path": ["student","students","{{studentId}}"] } }
            },
            {
              "name": "Get All Students (Direct)",
              "request": { "method": "GET", "url": { "raw": "{{student_base}}/student/students", "host": ["{{student_base}}"], "path": ["student","students"] } }
            },
            {
              "name": "Update Student (Direct)",
              "request": {
                "method": "PUT",
                "header": [ { "key": "Content-Type", "value": "application/json" } ],
                "url": { "raw": "{{student_base}}/student/students/{{studentId}}", "host": ["{{student_base}}"], "path": ["student","students","{{studentId}}"] },
                "body": { "mode": "raw", "raw": "{\n  \"name\": \"Alice Johnson Updated\",\n  \"email\": \"alice.updated@example.com\",\n  \"age\": 22\n}" }
              }
            },
            {
              "name": "Delete Student (Direct)",
              "request": { "method": "DELETE", "url": { "raw": "{{student_base}}/student/students/{{studentId}}", "host": ["{{student_base}}"], "path": ["student","students","{{studentId}}"] } }
            }
          ]
        },
        {
          "name": "Address Service (Direct)",
          "item": [
            {
              "name": "Get Address Sample (Direct)",
              "request": {
                "method": "GET",
                "url": {
                  "raw": "{{address_base}}/address/address/getAddress",
                  "host": ["{{address_base}}"],
                  "path": ["address","address","getAddress"]
                }
              },
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test('Status is 200', function () { pm.response.to.have.status(200); });"
                    ],
                    "type": "text/javascript"
                  }
                }
              ]
            }
          ],
          "description": "Note: Address service uses context-path '/address' and controller base '/address', so the full path is '/address/address/getAddress'."
        }
      ]
    }
  ],
  "variable": [
    { "key": "gateway_base", "value": "http://localhost:9090" },
    { "key": "course_base", "value": "http://localhost:8883" },
    { "key": "student_base", "value": "http://localhost:8882" },
    { "key": "address_base", "value": "http://localhost:8881" },
    { "key": "courseId", "value": "1" },
    { "key": "studentId", "value": "1" },
    { "key": "correlation_id", "value": "11111111-1111-1111-1111-111111111111" },
    { "key": "user_id", "value": "test-user" }
  ]
}
